# AI Qualifier Backup Configuration
# This file contains settings for the backup and disaster recovery system

# ========================================
# Basic Backup Settings
# ========================================

# Backup directory (where backups will be stored)
BACKUP_DIR="/backups"

# Retention period in days
RETENTION_DAYS=30

# Backup schedule (cron format)
# Default: Daily at 2 AM
BACKUP_SCHEDULE="0 2 * * *"

# Enable backup encryption
ENABLE_ENCRYPTION=true

# Enable backup compression
ENABLE_COMPRESSION=true

# ========================================
# Database Configuration
# ========================================

# Database connection settings
DB_HOST="${PGHOST:-database}"
DB_PORT="${PGPORT:-5432}"
DB_NAME="${PGDATABASE:-ai_qualifier}"
DB_USER="${PGUSER:-postgres}"
DB_PASSWORD="$PGPASSWORD"

# ========================================
# Encryption Settings
# ========================================

# Backup encryption key (set this in your environment variables)
# Generate with: openssl rand -base64 32
BACKUP_ENCRYPTION_KEY="$BACKUP_ENCRYPTION_KEY"

# Encryption algorithm (default: aes-256-cbc)
ENCRYPTION_ALGORITHM="aes-256-cbc"

# ========================================
# Cloud Storage Configuration
# ========================================

# AWS S3 settings
AWS_S3_BUCKET="$AWS_S3_BACKUP_BUCKET"
AWS_REGION="${AWS_S3_REGION:-us-east-1}"
AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"

# S3 storage class for backups
AWS_STORAGE_CLASS="STANDARD_IA"

# Enable S3 server-side encryption
AWS_S3_ENCRYPTION=true

# ========================================
# Backup Types and Schedules
# ========================================

# Daily backup settings
DAILY_RETENTION_DAYS=7
DAILY_SCHEDULE="0 2 * * *"

# Weekly backup settings
WEEKLY_RETENTION_DAYS=30
WEEKLY_SCHEDULE="0 3 * * 0"

# Monthly backup settings
MONTHLY_RETENTION_DAYS=365
MONTHLY_SCHEDULE="0 4 1 * *"

# ========================================
# Notification Settings
# ========================================

# Slack webhook URL for notifications
SLACK_WEBHOOK_URL="$SLACK_WEBHOOK_URL"

# Email notification settings
NOTIFICATION_EMAIL="$ADMIN_EMAIL"
SMTP_SERVER="$SMTP_SERVER"
SMTP_PORT="$SMTP_PORT"
SMTP_USERNAME="$SMTP_USERNAME"
SMTP_PASSWORD="$SMTP_PASSWORD"

# Notification levels
# Options: all, errors_only, critical_only, none
NOTIFICATION_LEVEL="errors_only"

# ========================================
# Performance Settings
# ========================================

# Number of parallel jobs for pg_dump/pg_restore
PARALLEL_JOBS=4

# Compression level (1-9, where 9 is maximum compression)
COMPRESSION_LEVEL=9

# Maximum backup file size before splitting (in MB)
MAX_BACKUP_SIZE_MB=2048

# ========================================
# Verification Settings
# ========================================

# Enable backup verification after creation
ENABLE_VERIFICATION=true

# Verification timeout (in seconds)
VERIFICATION_TIMEOUT=300

# ========================================
# Disaster Recovery Settings
# ========================================

# Emergency contact information
EMERGENCY_CONTACT="$EMERGENCY_CONTACT"

# Recovery time objective (RTO) in hours
RTO_HOURS=4

# Recovery point objective (RPO) in hours
RPO_HOURS=24

# Disaster recovery site configuration
DR_SITE_URL="$DR_SITE_URL"
DR_DATABASE_URL="$DR_DATABASE_URL"

# ========================================
# Monitoring and Alerting
# ========================================

# Enable monitoring integration
ENABLE_MONITORING=true

# Prometheus metrics endpoint
METRICS_ENDPOINT="http://localhost:9090"

# Health check URL
HEALTH_CHECK_URL="http://localhost:3000/api/health"

# Alert thresholds
BACKUP_SIZE_THRESHOLD_MB=1024
BACKUP_TIME_THRESHOLD_MINUTES=60
FAILED_BACKUP_THRESHOLD=3

# ========================================
# Advanced Settings
# ========================================

# Custom pg_dump options
PGDUMP_EXTRA_OPTIONS="--verbose --no-comments"

# Custom pg_restore options
PGRESTORE_EXTRA_OPTIONS="--verbose --no-comments"

# Temporary directory for processing
TEMP_DIR="/tmp/ai-qualifier-backup"

# Lock file location
LOCK_FILE="/var/run/ai-qualifier-backup.lock"

# Log file location
LOG_FILE="/var/log/ai-qualifier-backup.log"

# Maximum log file size (in MB)
MAX_LOG_SIZE_MB=100

# ========================================
# Security Settings
# ========================================

# Backup file permissions
BACKUP_FILE_PERMISSIONS=600

# Backup directory permissions
BACKUP_DIR_PERMISSIONS=700

# Enable audit logging
ENABLE_AUDIT_LOG=true

# Audit log file
AUDIT_LOG_FILE="/var/log/ai-qualifier-backup-audit.log"

# ========================================
# Compliance and Retention Policies
# ========================================

# Compliance framework (e.g., SOX, HIPAA, GDPR)
COMPLIANCE_FRAMEWORK=""

# Legal hold settings
LEGAL_HOLD_ENABLED=false
LEGAL_HOLD_RETENTION_YEARS=7

# Data classification
DATA_CLASSIFICATION="confidential"

# Geographic restrictions
ALLOWED_REGIONS="us-east-1,us-west-2,eu-west-1"

# ========================================
# Testing and Validation
# ========================================

# Enable automated restore testing
ENABLE_RESTORE_TESTING=true

# Restore test frequency (in days)
RESTORE_TEST_FREQUENCY=30

# Test database name
TEST_DATABASE_NAME="ai_qualifier_test_restore"

# ========================================
# Integration Settings
# ========================================

# Docker configuration
DOCKER_COMPOSE_FILE="docker-compose.prod.yml"
DOCKER_SERVICE_NAME="database"

# Kubernetes configuration (if applicable)
K8S_NAMESPACE="ai-qualifier"
K8S_DEPLOYMENT="ai-qualifier-db"

# CI/CD integration
ENABLE_CI_INTEGRATION=true
CI_WEBHOOK_URL="$CI_WEBHOOK_URL"

# ========================================
# Custom Scripts and Hooks
# ========================================

# Pre-backup script (executed before backup)
PRE_BACKUP_SCRIPT="$PROJECT_ROOT/scripts/pre-backup.sh"

# Post-backup script (executed after backup)
POST_BACKUP_SCRIPT="$PROJECT_ROOT/scripts/post-backup.sh"

# Pre-restore script (executed before restore)
PRE_RESTORE_SCRIPT="$PROJECT_ROOT/scripts/pre-restore.sh"

# Post-restore script (executed after restore)
POST_RESTORE_SCRIPT="$PROJECT_ROOT/scripts/post-restore.sh"

# Validation script (executed after restore for testing)
VALIDATION_SCRIPT="$PROJECT_ROOT/scripts/validate-restore.sh"