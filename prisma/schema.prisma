// ICP Qualifier Database Schema - Technical Assignment

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// User Management & Authentication
// ========================================

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  emailVerified     DateTime?
  name              String?
  image             String?
  password          String?
  role              Role      @default(USER)
  
  isActive          Boolean   @default(true)
  lastLoginAt       DateTime?
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  companies         Company[]
  qualificationRuns QualificationRun[]
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ========================================
// ICP Qualifier Core Models
// ========================================

// Company Profile - User's company that we analyze
model Company {
  id          String   @id @default(cuid())
  userId      String
  domain      String
  name        String?
  description String?  @db.Text
  industry    String?
  size        String?
  
  // Scraped/Analyzed Data (JSON)
  websiteData Json?    // Raw scraped data
  aiAnalysis  Json?    // AI summary
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  icps        ICP[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([domain, userId]) // Allow same domain for different users
  @@map("companies")
}

// Ideal Customer Profile - AI-generated ICP for a company
model ICP {
  id          String   @id @default(cuid())
  companyId   String
  
  title       String
  description String   @db.Text
  
  // Structured ICP Data
  buyerPersonas     Json  // Array of personas with roles, pain points
  companySize       Json  // Min/max employees, revenue ranges
  industries        String[]
  geographicRegions String[]
  fundingStages     String[]
  
  // AI Generation Details
  generatedBy String?  // AI model used
  prompt      String?  @db.Text
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  qualificationRuns QualificationRun[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("icps")
}

// Qualification Run - Batch of prospects being qualified
model QualificationRun {
  id          String   @id @default(cuid())
  icpId       String
  userId      String
  
  status      RunStatus @default(PENDING)
  totalProspects Int   @default(0)
  completed   Int      @default(0)
  
  // Relations
  icp         ICP      @relation(fields: [icpId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  results     ProspectQualification[]
  
  createdAt   DateTime @default(now())
  completedAt DateTime?
  
  @@map("qualification_runs")
}

// Prospect Qualification Result - Individual prospect qualification
model ProspectQualification {
  id              String   @id @default(cuid())
  runId           String
  
  domain          String
  companyName     String?
  
  // Analysis Data
  companyData     Json?    // Scraped/analyzed data
  
  // Qualification Results
  score           Float    // 0-100
  fitLevel        FitLevel // EXCELLENT, GOOD, FAIR, POOR
  reasoning       String   @db.Text
  matchedCriteria Json     // What matched from ICP
  gaps            Json     // What didn't match
  
  // Processing
  status          ProspectStatus @default(PENDING)
  error           String?  @db.Text
  
  // Relations
  run             QualificationRun @relation(fields: [runId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  analyzedAt      DateTime?
  
  @@map("prospect_qualifications")
}

// ========================================
// Enums
// ========================================

enum Role {
  USER
  ADMIN
}

enum RunStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ProspectStatus {
  PENDING
  ANALYZING
  COMPLETED
  FAILED
}

enum FitLevel {
  EXCELLENT  // 80-100
  GOOD       // 60-79
  FAIR       // 40-59
  POOR       // 0-39
}
