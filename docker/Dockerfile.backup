# Multi-stage Dockerfile for AI Qualifier Backup Service
FROM alpine:3.18 AS base

# Install system dependencies
RUN apk add --no-cache \
    postgresql15-client \
    curl \
    aws-cli \
    openssl \
    gzip \
    tar \
    bash \
    jq \
    python3 \
    py3-pip \
    coreutils \
    findutils \
    grep \
    sed \
    awk \
    mailutils \
    rsync

# Install Python packages for advanced features
RUN pip3 install --no-cache-dir \
    boto3 \
    prometheus-client \
    requests \
    cryptography \
    schedule

# Create backup user and directories
RUN addgroup -g 1001 -S backup && \
    adduser -u 1001 -S backup -G backup -s /bin/bash

# Create necessary directories
RUN mkdir -p \
    /backups \
    /var/log \
    /etc/ai-qualifier \
    /usr/local/bin/backup-hooks \
    /tmp/ai-qualifier-backup \
    /var/lib/backup-metrics

# Set proper permissions
RUN chown -R backup:backup \
    /backups \
    /var/log \
    /etc/ai-qualifier \
    /usr/local/bin/backup-hooks \
    /tmp/ai-qualifier-backup \
    /var/lib/backup-metrics

# Copy backup scripts
COPY scripts/backup-manager.sh /usr/local/bin/backup-manager.sh
COPY config/backup.conf /etc/ai-qualifier/backup.conf

# Make scripts executable
RUN chmod +x /usr/local/bin/backup-manager.sh

# Install backup monitoring script
COPY scripts/backup-monitor.py /usr/local/bin/backup-monitor.py
RUN chmod +x /usr/local/bin/backup-monitor.py

# Create cron configuration
RUN echo "0 2 * * * /usr/local/bin/backup-manager.sh daily >> /var/log/backup-cron.log 2>&1" > /etc/crontabs/backup && \
    echo "0 3 * * 0 /usr/local/bin/backup-manager.sh weekly >> /var/log/backup-cron.log 2>&1" >> /etc/crontabs/backup && \
    echo "0 4 1 * * /usr/local/bin/backup-manager.sh monthly >> /var/log/backup-cron.log 2>&1" >> /etc/crontabs/backup && \
    echo "*/15 * * * * /usr/local/bin/backup-monitor.py >> /var/log/backup-monitor.log 2>&1" >> /etc/crontabs/backup

# Create entrypoint script
RUN cat > /usr/local/bin/entrypoint.sh << 'EOF'
#!/bin/bash
set -e

# Source configuration
if [ -f /etc/ai-qualifier/backup.conf ]; then
    source /etc/ai-qualifier/backup.conf
fi

# Initialize backup system
echo "Initializing AI Qualifier backup system..."

# Create required directories
mkdir -p "${BACKUP_DIR:-/backups}" "${TEMP_DIR:-/tmp/ai-qualifier-backup}"

# Set up permissions
chown backup:backup "${BACKUP_DIR:-/backups}" "${TEMP_DIR:-/tmp/ai-qualifier-backup}"

# Wait for database to be ready
echo "Waiting for database connection..."
while ! pg_isready -h "${DB_HOST:-database}" -p "${DB_PORT:-5432}" -U "${DB_USER:-postgres}"; do
    sleep 2
done
echo "Database is ready!"

# Start cron daemon
echo "Starting cron daemon..."
crond -l 2 -f &

# Start backup monitoring service
echo "Starting backup monitoring service..."
/usr/local/bin/backup-monitor.py &

# Keep container running
echo "Backup service is ready!"
tail -f /var/log/backup-cron.log /var/log/backup-monitor.log
EOF

RUN chmod +x /usr/local/bin/entrypoint.sh

# Switch to backup user
USER backup

# Expose monitoring port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Set entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]